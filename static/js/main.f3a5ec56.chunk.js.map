{"version":3,"sources":["components/Input/index.jsx","config.js","firebaseInitialize.js","components/FormUser/index.jsx","components/Map/index.jsx","components/FormEmployee/index.jsx","views/RegisterEmployee/index.jsx","views/RegisterUser/index.jsx","views/Welcome/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Input","type","name","placeholder","onChange","value","className","dotenv","config","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","firebaseApp","firebaseAppAuth","auth","providers","googleProvider","GoogleAuthProvider","withFirebaseAuth","props","nameUser","emailUser","phoneUser","passwordUser","confirmPasswordUser","handleChange","registerUserInFirebase","signInWithGoogle","onClick","FormEmployee","nameEmployee","emailEmployee","phoneEmployee","passwordEmployee","confirmPasswordEmployee","handleChangeName","handleChangeEmail","handleChangePhone","handleChangePassword","handleChangeConfirmPassword","registerEmployeeInFirebase","emailProvider","EmailAuthProvider","signInWithEmailAndPassword","createUserWithEmailAndPassword","user","error","useState","setNameEmployee","setEmailEmployee","setPhoneEmployee","setPasswordEmployee","setConfirmPasswordEmployee","e","target","inputs","filteredInputs","filter","input","map","length","alert","validateInputs","console","log","then","catch","message","RegisterUser","Welcome","to","App","basename","window","location","pathname","exact","path","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3a5ec56.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Input = ({type, name, placeholder, onChange, value}) =>{\r\n   return (\r\n       <label className=\"input-container\">\r\n           <input \r\n            className=\"input\" \r\n            type={type} \r\n            name={name} \r\n            onChange={onChange}\r\n            value={value}\r\n            />\r\n           <span className=\"placeholder\">{placeholder}</span>\r\n           <span className=\"border\"></span>\r\n       </label>\r\n   )\r\n}\r\nexport default Input;"," import * as firebase from 'firebase/firebase-app';\n\n import dotenv from \"dotenv\"\n dotenv.config()\n\n const firebaseConfig = {\n     apiKey: process.env.REACT_APP_API_KEY,\n     authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n     databaseURL: process.env.REACT_APP_DATABASE_URL,\n     projectId: process.env.REACT_APP_PROJECT_ID,\n     storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n     messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n     appId: process.env.REACT_APP_APP_ID\n };\n\n firebase.initializeApp(firebaseConfig);\n\n export default firebaseConfig;","import * as firebase from 'firebase/app';\nimport firebaseConfig from '../src/config'\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig); \nexport default firebaseApp;","import React from \"react\";\nimport { Input } from '../';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport withFirebaseAuth, { WrappedComponentProps } from 'react-with-firebase-auth';\nimport \"./style.css\";\nimport Button from '../Button/index'\nimport firebaseApp from '../../firebaseInitialize'\n\n\n\n// const firebaseApp = firebase.initializeApp(firebaseConfig);\nconst FormUser = ( props ) => {\n    const {\n        nameUser, \n        emailUser,\n        phoneUser,\n        passwordUser,\n        confirmPasswordUser,\n        handleChange,\n        registerUserInFirebase,\n        signInWithGoogle\n        } = props;\n\n    \n\n    return (\n        <form className=\"form-employee\">\n            <Input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Nombre de usuario\"\n                value={nameUser}\n                onChange={handleChange}\n            />\n            <Input\n                type=\"number\"\n                name=\"phone\"\n                placeholder=\"Teléfono\"\n                value={phoneUser}\n                onChange={handleChange}\n            />\n            <Input\n                type=\"text\"\n                name=\"email\"\n                placeholder=\"Correo electrónico\"\n                value={emailUser}\n                onChange={handleChange}\n            />\n\n            <Input\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Crear contraseña\"\n                value={passwordUser}\n                onChange={handleChange}\n            />\n            <Input\n                type=\"password\"\n                name=\"confirm-password\"\n                placeholder=\"Confirmar contraseña\"\n                value={confirmPasswordUser}\n                onChange={ handleChange}\n            />\n            <div> \n               <button className=\"google-btn\" onClick={signInWithGoogle}>Inicia sesión con Google</button>\n            </div>\n            <input className=\"button\" onClick={registerUserInFirebase} type =\"submit\" value=\"Aceptar\" />   \n        </form >\n    )\n\n}\n\nconst firebaseAppAuth = firebaseApp.auth();\nconst providers = {\n    googleProvider: new firebase.auth.GoogleAuthProvider(),\n  };\n  export default withFirebaseAuth({\n    providers,\n    firebaseAppAuth,\n  })(FormUser);\n\n\n  \n","import React, {useState} from \"react\"\r\nimport './style.css'\r\nimport ReactMapGL from 'react-map-gl';\r\n\r\nimport dotenv from \"dotenv\"\r\n dotenv.config()\r\n\r\nconst MapComponent = () => {\r\n    const [viewport, setViewport] = useState(\r\n        {\r\n            width: 400,\r\n            height: 400,\r\n            latitude: 37.7577,\r\n            longitude: -122.4376,\r\n            zoom: 8\r\n        }\r\n    )\r\n\r\n    return (\r\n        <ReactMapGL\r\n            {...viewport}\r\n            onViewportChange={(viewport)=> setViewport(viewport)}\r\n            mapboxApiAccessToken={process.env.REACT_APP_MAP_KEY}\r\n        />     \r\n\r\n    )\r\n  }\r\n\r\n  export default MapComponent\r\n","import React from \"react\";\r\nimport {Input} from '../';\r\nimport \"./style.css\";\r\n\r\nconst FormEmployee = (props) => {\r\n    const {\r\n        nameEmployee, \r\n        emailEmployee,\r\n        phoneEmployee,\r\n        passwordEmployee,\r\n        confirmPasswordEmployee,\r\n        handleChangeName,\r\n        handleChangeEmail,\r\n        handleChangePhone,\r\n        handleChangePassword,\r\n        handleChangeConfirmPassword,\r\n        registerEmployeeInFirebase\r\n        } = props;\r\n    return (\r\n        <form className=\"form-employee\">\r\n            <Input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Nombre\"\r\n                value={nameEmployee}\r\n                onChange={handleChangeName}\r\n            />\r\n            <Input\r\n                type=\"text\"\r\n                name=\"email\"\r\n                placeholder=\"Correo electrónico\"\r\n                value={emailEmployee}\r\n                onChange={handleChangeEmail}\r\n            />\r\n            <Input\r\n                type=\"number\"\r\n                name=\"phone\"\r\n                placeholder=\"Teléfono\"\r\n                value={phoneEmployee}\r\n                onChange={handleChangePhone}\r\n            />\r\n             <Input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"Crear contraseña\"\r\n                value={passwordEmployee}\r\n                onChange={handleChangePassword}\r\n            />\r\n             <Input\r\n                type=\"password\"\r\n                name=\"confirm-password\"\r\n                placeholder=\"Confirmar contraseña\"\r\n                value={confirmPasswordEmployee}\r\n                onChange={ handleChangeConfirmPassword}\r\n                />\r\n            <p>Lee nuestros <a>términos y condiciones</a></p>\r\n            <input className=\"button\" onClick={registerEmployeeInFirebase} type =\"submit\" value=\"Aceptar\" />           \r\n\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default FormEmployee;","import React, {useState} from 'react';\nimport {FormEmployee} from '../../components';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport firebaseApp from '../../firebaseInitialize'\nimport withFirebaseAuth from 'react-with-firebase-auth';\nimport './style.css';\n\nconst RegisterEmployee = ({signInWithEmailAndPassword,\n    createUserWithEmailAndPassword, user, error}) => {\n    const [nameEmployee, setNameEmployee] = useState('')\n    const [emailEmployee, setEmailEmployee] = useState('')\n    const [phoneEmployee, setPhoneEmployee] = useState('')\n    const [passwordEmployee, setPasswordEmployee] = useState('')\n    const [confirmPasswordEmployee, setConfirmPasswordEmployee] = useState('')\n\n    const handleChangeName = (e) => setNameEmployee(e.target.value)\n    const handleChangeEmail = (e) => setEmailEmployee(e.target.value)\n    const handleChangePhone = (e) => setPhoneEmployee(e.target.value)\n    const handleChangePassword= (e) => setPasswordEmployee(e.target.value)\n    const handleChangeConfirmPassword = (e) => setConfirmPasswordEmployee(e.target.value)\n\n   const validateInputs = () =>{\n        const inputs = [nameEmployee, emailEmployee, phoneEmployee, passwordEmployee, confirmPasswordEmployee]\n        const filteredInputs = inputs.filter(input => input !== '' || input !== null).map(input => input)\n        if(passwordEmployee !== confirmPasswordEmployee){\n             alert('Las contraseñas no son iguales') \n             return\n        }\n        if(inputs.length === filteredInputs.length){\n            return true\n        }\n        return false\n   }\n\n    const registerEmployeeInFirebase = () =>{\n         if(validateInputs()=== false){\n             return \n         }\n         console.log(\"iniciando proceso\")\n         createUserWithEmailAndPassword(emailEmployee, passwordEmployee)\n         .then(()=> console.log(\"ya se guardó el usuario\"))\n         .then(()=>signInWithEmailAndPassword(emailEmployee, passwordEmployee))\n         .catch(error => alert(error.message))\n    }\n\n\n    \n    return (\n        <section className=\"register-employee\">\n            <FormEmployee\n             nameEmployee={nameEmployee} \n             emailEmployee={emailEmployee}\n             phoneEmployee={phoneEmployee}\n             passwordEmployee={passwordEmployee}\n             confirmPasswordEmployee={confirmPasswordEmployee}\n             handleChangeName={handleChangeName}\n             handleChangeEmail={handleChangeEmail}\n             handleChangePhone={handleChangePhone}\n             handleChangePassword={handleChangePassword}\n             handleChangeConfirmPassword={handleChangeConfirmPassword}\n             registerEmployeeInFirebase={registerEmployeeInFirebase}\n            />\n        </section>\n    )\n}\n\nconst providers = {\n    emailProvider : new firebase.auth.EmailAuthProvider(),\n}\n\n\n\n// const firebaseApp = firebase.initializeApp(firebaseConfig);\nconst firebaseAppAuth = firebaseApp.auth();\n\nexport default withFirebaseAuth({\n    providers,\n    firebaseAppAuth,\n})(RegisterEmployee);\n","import React from 'react';\nimport FormUser from '../../components/FormUser/index';\nimport './style.css';\n\n\n\nconst RegisterUser = () => {\n    \n    return (\n        <section className=\"register-user\">\n            <FormUser/>\n        </section>\n    )\n}\n\nexport default RegisterUser","import React from 'react';\nimport './style.css';\n// import Button from '../../components/Button';\nimport {Link} from 'react-router-dom';\n\nconst Welcome = () => {\n    return(\n      <section className=\"background-welcome\">\n          <nav className=\"navigation-menu\">\n          <Link to=\"/registerUser\" className=\"user-btn\">\n          USUARIO\n          </Link>\n          <Link to=\"/registerEmployee\" className=\"nav-a\">\n            Técnico de lavado\n          </Link>\n        </nav>  \n      </section> \n    )\n}\n\n\nexport default Welcome;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport {RegisterEmployee, RegisterUser, Welcome} from './views';\nimport './App.css';\n\nfunction App() {\n    \n  return (\n    \n    <Router basename={window.location.pathname || ''}>\n      <Switch>\n        <Route exact path = \"/\" render = {props => <Welcome/>}></Route> */}\n        <Route exact path = \"/registerUser\" render = {props => <RegisterUser/>}></Route>\n        <Route exact path=\"/registerEmployee\" render={props => <RegisterEmployee/>}></Route>\n      </Switch>\n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}